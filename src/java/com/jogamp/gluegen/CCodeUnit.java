/**
 * Copyright 2023 JogAmp Community. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice, this list of
 *       conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list
 *       of conditions and the following disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY JogAmp Community ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JogAmp Community OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of JogAmp Community.
 */
package com.jogamp.gluegen;

import java.io.IOException;
import java.util.List;

/**
 * C code unit (a generated C source file),
 * covering multiple {@link FunctionEmitter} allowing to unify output, decoration and dynamic helper code injection per unit.
 **/
public class CCodeUnit extends CodeUnit {
    /** base c-unit name with suffix. */
    public final String cUnitName;

    /**
     * @param filename the class's full filename to open w/ write access
     * @param cUnitName the base c-unit name, i.e. c-file basename with suffix
     * @param generator informal optional object that is creating this unit, used to be mentioned in a warning message if not null.
     * @throws IOException
     */
    public CCodeUnit(final String filename, final String cUnitName, final Object generator) throws IOException {
        super(filename, generator);
        this.cUnitName = cUnitName;
        CodeGenUtils.emitAutogeneratedWarning(output, generator, "C-Unit: "+cUnitName+", "+filename);
    }

    public void emitHeader(final String packageName, final String className, final List<String> customCode) {
        emitln("#include <jni.h>");
        emitln("#include <stdlib.h>");
        emitln("#include <string.h>");
        emitln("#include <assert.h>");
        emitln("#include <stddef.h>");
        emitln();
        emitln("static jobject JVMUtil_NewDirectByteBufferCopy(JNIEnv *env, jclass clazzBuffers, void * source_address, size_t capacity); /* forward decl. */");
        emitln();

        boolean addNewDirectByteBufferCopyUnitCode = false;
        for (final String code : customCode) {
            emitln(code);
            addNewDirectByteBufferCopyUnitCode = addNewDirectByteBufferCopyUnitCode || code.contains("JVMUtil_NewDirectByteBufferCopy");
        }
        emitln();
        if( addNewDirectByteBufferCopyUnitCode ) {
            addTailCode(NewDirectByteBufferCopyUnitCode); // potentially used...
        }
    }

    @Override
    public String toString() { return "CCodeUnit[unit "+cUnitName+", file "+filename+"]"; }

    public static final String NewDirectByteBufferCopyUnitCode =
        "static const char * nameCopyNativeToDirectByteBuffer = \"copyNativeToDirectByteBuffer\";\n"+
        "static const char * nameCopyNativeToDirectByteBufferSignature = \"(JJ)Ljava/nio/ByteBuffer;\";\n"+
        "\n"+
        "static jobject JVMUtil_NewDirectByteBufferCopy(JNIEnv *env, jclass clazzBuffers, void * source_address, size_t capacity) {\n"+
        "    jmethodID cstrBuffersNew = (*env)->GetStaticMethodID(env, clazzBuffers, nameCopyNativeToDirectByteBuffer, nameCopyNativeToDirectByteBufferSignature);\n"+
        "    if(NULL==cstrBuffersNew) {\n"+
        "        fprintf(stderr, \"Can't get method Buffers.%s(%s)\\n\", nameCopyNativeToDirectByteBuffer, nameCopyNativeToDirectByteBufferSignature);\n"+
        "        (*env)->FatalError(env, nameCopyNativeToDirectByteBuffer);\n"+
        "        return JNI_FALSE;\n"+
        "    }\n"+
        "    jobject jbyteBuffer  = (*env)->CallStaticObjectMethod(env, clazzBuffers, cstrBuffersNew, (jlong)(intptr_t)source_address, (jlong)capacity);\n"+
        "    if( (*env)->ExceptionCheck(env) ) {\n"+
        "        (*env)->ExceptionDescribe(env);\n"+
        "        (*env)->ExceptionClear(env);\n"+
        "        (*env)->FatalError(env, \"Exception occurred\");\n"+
        "        return NULL;\n"+
        "    }\n"+
        "    return jbyteBuffer;\n"+
        "}\n";
}
